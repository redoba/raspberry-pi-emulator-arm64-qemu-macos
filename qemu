#!/bin/bash

# Configuraci√≥n b√°sica
BASEDIR=$(cd "$(dirname "$0")"; pwd)
IMAGES_DIR="$BASEDIR/images"
FIRMWARE_DIR="$BASEDIR/firmware"
VMS_DIR="$BASEDIR/vms"
CONFIG_DIR="$BASEDIR/config"
LOGS_DIR="$BASEDIR/logs"

# Imagen base Ubuntu Cloud ARM64 (no modificar)
CLOUD_IMG="$IMAGES_DIR/ubuntu-24.04-cloud-arm64.img"
CLOUD_IMG_URL="https://cloud-images.ubuntu.com/noble/current/noble-server-cloudimg-arm64.img"

# Archivos de trabajo
WORK_IMG="$VMS_DIR/ubuntu-cloud-vm.img"
PIDFILE="$VMS_DIR/vm.pid"
LOGFILE="$LOGS_DIR/vm.log"

# Archivos cloud-init
CLOUD_INIT_ISO="$CONFIG_DIR/cloud-init.iso"
USER_DATA="$CONFIG_DIR/user-data"
META_DATA="$CONFIG_DIR/meta-data"

# Firmware UEFI
UEFI_CODE="$FIRMWARE_DIR/QEMU_EFI.fd"
UEFI_VARS_TEMPLATE="$FIRMWARE_DIR/QEMU_VARS.fd"
UEFI_VARS_WORK="$VMS_DIR/QEMU_VARS_work.fd"

# Especificaciones Raspberry Pi 3 B+
MEMORY=1024        # 1GB RAM como RPi 3 B+
CPU="cortex-a57"   # CPU ARM Cortex-A57 (m√°s compatible que A53)
CORES=4            # Quad-core como RPi 3 B+
QEMU=qemu-system-aarch64

function help {
  echo -e "\nüçì QEMU Raspberry Pi 3 B+ (Ubuntu 24.04 ARM64) con UEFI"
  echo "Uso: $0 [create|delete|start|stop|status|download]"
  echo -e "\nComandos:"
  echo "  download - Descarga la imagen Ubuntu Cloud ARM64"
  echo "  create   - Crea la VM usando imagen cloud"
  echo "  delete   - Borra la VM y archivos de trabajo"
  echo "  start    - Inicia la VM con specs RPi 3 B+ (SSH en puerto 2223)"
  echo "  stop     - Apaga la VM gracefully"
  echo "  status   - Muestra el estado actual de la VM"
  echo -e "\nCon√©ctate por SSH: ssh ubuntu@localhost -p 2223"
  echo "Usuario/contrase√±a por defecto: ubuntu/ubuntu"
  echo -e "\nEspecificaciones emuladas:"
  echo "  CPU: ARM Cortex-A53 quad-core (como RPi 3 B+)"
  echo "  RAM: 1GB (como RPi 3 B+)"
  echo "  Boot: UEFI con firmware EDK2"
  echo -e "\nPrimeros pasos:"
  echo "  1. $0 download  # Descargar imagen Ubuntu Cloud"
  echo "  2. $0 create    # Crear la VM"
  echo "  3. $0 start     # Iniciar la VM"
  echo -e "\nEstructura de archivos:"
  echo "  images/   - Imagen base Ubuntu Cloud (NO tocar)"
  echo "  vms/      - Archivos de trabajo de la VM"
  echo "  config/   - Configuraci√≥n cloud-init"
  echo "  firmware/ - Firmware UEFI ARM64"
  echo "  logs/     - Registros de la VM"
}

function verificar_dependencias {
  # Verificar QEMU
  if ! command -v $QEMU >/dev/null 2>&1; then
    echo "‚ùå $QEMU no encontrado. Instala QEMU para ARM64:"
    echo "   macOS: brew install qemu"
    echo "   Ubuntu: sudo apt install qemu-system-arm"
    exit 1
  fi
  
  # Verificar firmware UEFI (usar el de QEMU en macOS)
  local SYSTEM_UEFI="/opt/homebrew/share/qemu/edk2-aarch64-code.fd"
  if [ -f "$SYSTEM_UEFI" ]; then
    # Usar firmware del sistema
    echo "‚úÖ Usando firmware UEFI del sistema"
    if [ ! -f "$UEFI_CODE" ]; then
      cp "$SYSTEM_UEFI" "$UEFI_CODE"
    fi
  elif [ ! -f "$UEFI_CODE" ]; then
    echo "‚ùå Firmware UEFI no encontrado"
    echo "   Descargando firmware UEFI..."
    mkdir -p "$FIRMWARE_DIR"
    curl -L -o "$UEFI_CODE" https://releases.linaro.org/components/kernel/uefi-linaro/latest/release/qemu64/QEMU_EFI.fd
  fi
  
  # Crear archivo de variables UEFI si no existe
  if [ ! -f "$UEFI_VARS_TEMPLATE" ]; then
    echo "üîß Creando archivo de variables UEFI..."
    dd if=/dev/zero of="$UEFI_VARS_TEMPLATE" bs=1M count=64 2>/dev/null
  fi
  
  # Crear directorios si no existen
  mkdir -p "$VMS_DIR" "$CONFIG_DIR" "$LOGS_DIR"
}

function crear_cloud_init {
  echo "‚òÅÔ∏è  Creando configuraci√≥n cloud-init..."
  
  # Crear user-data para cloud-init
  cat > "$USER_DATA" << 'EOF'
#cloud-config
users:
  - name: ubuntu
    sudo: ALL=(ALL) NOPASSWD:ALL
    shell: /bin/bash
    # Contrase√±a hasheada para 'ubuntu' (generada con: openssl passwd -6 ubuntu)
    password: $6$uqXSugPCQSGUpllA$ognUeLkpF.jM0sc2TOkkx7zODxVTa0rWZf6UZDB2fWqk9uC2EPiZYsRYOzkJ4cO1lKbCHPW4SjYQFgFqZKUva.
    chpasswd: { expire: False }
    ssh_authorized_keys: []

ssh_pwauth: True
package_update: true
package_upgrade: true

# Instalar herramientas b√°sicas
packages:
  - htop
  - curl
  - wget
  - git
  - vim

# Configurar contrase√±a de texto plano como respaldo
chpasswd:
  list: |
    ubuntu:ubuntu
  expire: False

# Habilitar SSH inmediatamente
runcmd:
  - systemctl enable ssh
  - systemctl start ssh
  - echo "SSH habilitado" >> /var/log/cloud-init-output.log
EOF

  # Crear meta-data
  cat > "$META_DATA" << 'EOF'
instance-id: ubuntu-rpi3-vm
local-hostname: ubuntu-rpi3
EOF

  # Crear ISO cloud-init
  if command -v genisoimage >/dev/null 2>&1; then
    genisoimage -output "$CLOUD_INIT_ISO" -volid cidata -joliet -rock "$USER_DATA" "$META_DATA" 2>/dev/null
  elif command -v mkisofs >/dev/null 2>&1; then
    mkisofs -o "$CLOUD_INIT_ISO" -V cidata -J -r "$USER_DATA" "$META_DATA" 2>/dev/null
  else
    echo "‚ö†Ô∏è  No se pudo crear cloud-init.iso (falta genisoimage/mkisofs)"
    echo "    macOS: brew install cdrtools"
    echo "    Ubuntu: sudo apt install genisoimage"
    echo "    La VM arrancar√° pero necesitar√°s configurar manualmente"
    return 1
  fi
  
  echo "‚úÖ Cloud-init configurado"
  return 0
}

function download {
  echo "üì• Descargando imagen Ubuntu 24.04 Cloud ARM64..."
  mkdir -p "$IMAGES_DIR"
  
  if [ -f "$CLOUD_IMG" ]; then
    echo "‚ö†Ô∏è  La imagen ya existe. ¬øDescargar de nuevo? (y/N)"
    read -r response
    if [[ ! "$response" =~ ^[Yy]$ ]]; then
      echo "‚ÑπÔ∏è  Descarga cancelada"
      return 0
    fi
    rm -f "$CLOUD_IMG"
  fi
  
  echo "üåê Descargando desde: $CLOUD_IMG_URL"
  if command -v curl >/dev/null 2>&1; then
    curl -L --progress-bar -o "$CLOUD_IMG" "$CLOUD_IMG_URL"
  elif command -v wget >/dev/null 2>&1; then
    wget --progress=bar -O "$CLOUD_IMG" "$CLOUD_IMG_URL"
  else
    echo "‚ùå No se encontr√≥ curl ni wget"
    echo "   macOS: brew install curl"
    echo "   Ubuntu: sudo apt install curl"
    exit 1
  fi
  
  if [ -f "$CLOUD_IMG" ]; then
    SIZE=$(du -h "$CLOUD_IMG" | cut -f1)
    echo "‚úÖ Imagen descargada: $(basename "$CLOUD_IMG") ($SIZE)"
  else
    echo "‚ùå Error descargando la imagen"
    exit 1
  fi
}

function create {
  verificar_dependencias
  
  # Verificar que existe la imagen cloud
  if [ ! -f "$CLOUD_IMG" ]; then
    echo "‚ùå No se encuentra la imagen Ubuntu Cloud en $CLOUD_IMG"
    echo "   Ejecuta: $0 download"
    exit 1
  fi
  
  echo "üå•Ô∏è  Usando imagen Ubuntu Cloud ARM64"
  crear_cloud_init
  
  if [ -f "$WORK_IMG" ]; then
    echo "‚ö†Ô∏è  Ya existe una VM, borrando..."
    delete
  fi
  
  # Limpiar claves SSH anteriores para evitar conflictos
  echo "üîë Limpiando claves SSH anteriores del puerto 2223..."
  ssh-keygen -R "[localhost]:2223" 2>/dev/null || true
  
  echo "üß™ Creando imagen de trabajo..."
  cp "$CLOUD_IMG" "$WORK_IMG"
  
  # Convertir a qcow2 para mejor rendimiento
  echo "üîÑ Convirtiendo a formato qcow2 para mejor rendimiento..."
  qemu-img convert -f qcow2 -O qcow2 "$WORK_IMG" "$WORK_IMG.qcow2"
  mv "$WORK_IMG.qcow2" "$WORK_IMG"
  
  # Expandir imagen a 8GB para tener espacio
  echo "üîÑ Expandiendo imagen a 8GB..."
  qemu-img resize "$WORK_IMG" 8G
  
  # Crear copia de variables UEFI para esta VM
  if [ -f "$UEFI_VARS_TEMPLATE" ]; then
    cp "$UEFI_VARS_TEMPLATE" "$UEFI_VARS_WORK"
  fi
  
  echo "‚úÖ VM creada: $(basename "$WORK_IMG")"
  echo "üìÅ Archivos en: $VMS_DIR"
}

function delete {
  if [ -f "$PIDFILE" ]; then
    stop
  fi
  
  # Borrar imagen de trabajo
  if [ -f "$WORK_IMG" ]; then
    echo "üóëÔ∏è  Borrando imagen de trabajo..."
    rm -f "$WORK_IMG"
    echo "‚úÖ VM eliminada"
  else
    echo "‚ÑπÔ∏è  No hay VM para borrar"
  fi
  
  # Limpiar archivos UEFI de trabajo
  if [ -f "$UEFI_VARS_WORK" ]; then
    echo "üóëÔ∏è  Limpiando variables UEFI de trabajo..."
    rm -f "$UEFI_VARS_WORK"
  fi
  
  # Limpiar archivos UEFI y cloud-init
  if [ -f "$UEFI_VARS_WORK" ]; then
    echo "üóëÔ∏è  Limpiando variables UEFI de trabajo..."
    rm -f "$UEFI_VARS_WORK"
  fi
  
  if [ -f "$CLOUD_INIT_ISO" ] || [ -f "$USER_DATA" ] || [ -f "$META_DATA" ]; then
    echo "üóëÔ∏è  Limpiando archivos cloud-init..."
    rm -f "$CLOUD_INIT_ISO" "$USER_DATA" "$META_DATA"
  fi
  
  rm -f "$PIDFILE" "$LOGFILE"
  
  # Limpiar claves SSH del puerto 2223
  echo "üîë Limpiando claves SSH del puerto 2223..."
  ssh-keygen -R "[localhost]:2223" 2>/dev/null || true
}

function start {
  verificar_dependencias
  
  # Verificar que existe la VM
  if [ ! -f "$WORK_IMG" ]; then
    echo "‚ùå No existe VM. Usa: $0 create"
    exit 1
  fi
  
  echo "üå•Ô∏è  Usando imagen Ubuntu Cloud"
  
  if [ -f "$PIDFILE" ]; then
    PID=$(cat "$PIDFILE")
    if kill -0 $PID 2>/dev/null; then
      echo "‚ö†Ô∏è  La VM ya est√° corriendo (PID $PID)"
      echo "SSH: ssh ubuntu@localhost -p 2223"
      exit 0
    fi
  fi
  
  echo "üöÄ Iniciando VM con especificaciones Raspberry Pi 3 B+..."
  echo "   CPU: ARM Cortex-A53 ${CORES}-core"
  echo "   RAM: ${MEMORY}MB"
  echo "   Boot: UEFI con pflash (configuraci√≥n Ubuntu Wiki)"
  
  # Configuraci√≥n UEFI con pflash (basada en Ubuntu Wiki oficial)
  QEMU_ARGS="-M virt -cpu $CPU -smp $CORES -m $MEMORY -nographic"
  
  # Usar firmware del sistema directamente si est√° disponible
  if [ -f "/opt/homebrew/share/qemu/edk2-aarch64-code.fd" ]; then
    echo "üîß Usando firmware UEFI del sistema homebrew"
    QEMU_ARGS="$QEMU_ARGS -drive if=pflash,format=raw,file=/opt/homebrew/share/qemu/edk2-aarch64-code.fd,readonly=on"
    # Crear variables UEFI temporales
    dd if=/dev/zero of="$UEFI_VARS_WORK" bs=1M count=64 2>/dev/null
    QEMU_ARGS="$QEMU_ARGS -drive if=pflash,format=raw,file=$UEFI_VARS_WORK"
  else
    echo "üîß Usando firmware UEFI local"
    QEMU_ARGS="$QEMU_ARGS -drive if=pflash,format=raw,file=$UEFI_CODE,readonly=on"
    QEMU_ARGS="$QEMU_ARGS -drive if=pflash,format=raw,file=$UEFI_VARS_WORK"
  fi
  
  # Configuraci√≥n cloud image estilo Ubuntu Wiki
  echo "üîç Iniciando con imagen cloud + cloud-init..."
  QEMU_ARGS="$QEMU_ARGS -drive if=none,file=$WORK_IMG,id=hd0"
  QEMU_ARGS="$QEMU_ARGS -device virtio-blk-device,drive=hd0"
  if [ -f "$CLOUD_INIT_ISO" ]; then
    QEMU_ARGS="$QEMU_ARGS -drive if=none,file=$CLOUD_INIT_ISO,format=raw,id=cd0"
    QEMU_ARGS="$QEMU_ARGS -device virtio-blk-device,drive=cd0"
  fi
  
  # Red estilo Ubuntu Wiki para macOS
  QEMU_ARGS="$QEMU_ARGS -netdev user,id=net0,hostfwd=tcp::2223-:22"
  QEMU_ARGS="$QEMU_ARGS -device virtio-net-device,netdev=net0"
  
  # Crear archivo de log
  mkdir -p "$LOGS_DIR"
  
  echo "üîß Comando completo: $QEMU $QEMU_ARGS"
  nohup $QEMU $QEMU_ARGS > "$LOGFILE" 2>&1 &
  VM_PID=$!
  echo $VM_PID > "$PIDFILE"
  
  sleep 3
  echo "‚úÖ VM iniciada (PID $VM_PID)"
  echo "üîç Verificando arranque..."
  
  # Verificar que el proceso siga corriendo
  if ! kill -0 $VM_PID 2>/dev/null; then
    echo "‚ùå La VM se cerr√≥ inesperadamente"
    echo "üìù √öltimas l√≠neas del log:"
    tail -10 "$LOGFILE" 2>/dev/null || echo "No hay log disponible"
    rm -f "$PIDFILE"
    exit 1
  fi
  
  sleep 2
  if [ -s "$LOGFILE" ]; then
    echo "üìù Log gener√°ndose correctamente"
  else
    echo "‚ö†Ô∏è  El log est√° vac√≠o, revisar configuraci√≥n"
  fi
  
  echo -e "\nüåê Conexi√≥n SSH:"
  echo "   ssh ubuntu@localhost -p 2223"
  echo "   Usuario/contrase√±a: ubuntu/ubuntu"
  echo -e "\nüìä Monitoreo:"
  echo "   Estado: $0 status"
  echo "   Log: tail -f $LOGFILE"
}

function stop {
  if [ ! -f "$PIDFILE" ]; then
    echo "‚ÑπÔ∏è  No hay VM corriendo"
    return
  fi
  
  PID=$(cat "$PIDFILE")
  if ! kill -0 $PID 2>/dev/null; then
    echo "‚ÑπÔ∏è  Proceso ya no existe"
    rm -f "$PIDFILE"
    return
  fi
  
  echo "‚ö° Enviando se√±al de apagado graceful..."
  kill -TERM $PID
  
  # Esperar apagado graceful
  for i in {1..10}; do
    if ! kill -0 $PID 2>/dev/null; then
      echo "‚úÖ VM apagada gracefully"
      rm -f "$PIDFILE"
      return
    fi
    sleep 1
    echo -n "."
  done
  
  echo -e "\nüî® Forzando apagado..."
  kill -9 $PID 2>/dev/null
  sleep 1
  
  if ! kill -0 $PID 2>/dev/null; then
    echo "‚úÖ VM terminada"
  else
    echo "‚ö†Ô∏è  No se pudo terminar el proceso"
  fi
  
  rm -f "$PIDFILE"
}

function status {
  echo "üîç Estado del sistema QEMU Raspberry Pi 3 B+"
  echo "================================================"
  
  # Estado de la VM
  if [ -f "$PIDFILE" ]; then
    PID=$(cat "$PIDFILE")
    if kill -0 $PID 2>/dev/null; then
      echo "üü¢ VM: CORRIENDO (PID $PID)"
      echo "   SSH: ssh ubuntu@localhost -p 2223"
    else
      echo "üî¥ VM: PARADA (archivo PID obsoleto)"
      rm -f "$PIDFILE"
    fi
  else
    echo "üî¥ VM: PARADA"
  fi
  
  # Estado de imagen base
  echo -e "\nüì¶ Imagen base:"
  if [ -f "$CLOUD_IMG" ]; then
    SIZE=$(du -h "$CLOUD_IMG" | cut -f1)
    echo "   ‚úÖ Ubuntu Cloud: $(basename "$CLOUD_IMG") ($SIZE)"
  else
    echo "   ‚ùå Ubuntu Cloud: No encontrada (ejecuta: $0 download)"
  fi
  
  # Estado de VM de trabajo
  echo -e "\nüñ•Ô∏è  VM de trabajo:"
  if [ -f "$WORK_IMG" ]; then
    SIZE=$(du -h "$WORK_IMG" | cut -f1)
    echo "   ‚úÖ VM: $(basename "$WORK_IMG") ($SIZE)"
  else
    echo "   ‚ùå No hay VM creada (ejecuta: $0 create)"
  fi
  
  # Estado firmware UEFI
  echo -e "\nüîß Firmware UEFI:"
  if [ -f "$UEFI_CODE" ]; then
    echo "   ‚úÖ UEFI Code: $(basename "$UEFI_CODE")"
  else
    echo "   ‚ùå UEFI Code: No encontrado"
  fi
  
  if [ -f "$UEFI_VARS_WORK" ]; then
    echo "   ‚úÖ UEFI Variables: $(basename "$UEFI_VARS_WORK")"
  else
    echo "   ‚ö†Ô∏è  UEFI Variables: No creadas"
  fi
  
  # Log reciente
  if [ -f "$LOGFILE" ] && [ -s "$LOGFILE" ]; then
    echo -e "\nüìù √öltimas l√≠neas del log:"
    tail -5 "$LOGFILE" | sed 's/^/   /'
  fi
}

case "$1" in
  download) download ;;
  create) create ;;
  delete) delete ;;
  start) start ;;
  stop) stop ;;
  status) status ;;
  "")
    # Sin argumentos, mostrar ayuda
    help
    ;;
  *)
    # Comando inv√°lido
    echo "‚ùå Comando inv√°lido: '$1'"
    echo ""
    help
    exit 1
    ;;
esac
